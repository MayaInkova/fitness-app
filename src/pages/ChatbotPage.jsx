import React, { useState, useRef, useEffect, useCallback } from "react";
import { v4 as uuid } from "uuid";
import { sendMessage } from "../services/chatbot";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext"; // –£–≤–µ—Ä–∏ —Å–µ, —á–µ AuthContext –µ –ø—Ä–∞–≤–∏–ª–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

import chatbotIcon from "../images/chatbot.png";
import userIcon from "../images/user.png";

// –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –¥–∏–µ—Ç–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ
import balancedImg from "../images/balanced.png";
import proteinImg from "../images/protein.png";
import ketoImg from "../images/keto.png";
import veganImg from "../images/vegan.png";
import vegetarianImg from "../images/vegetarian.png";
import paleoImg from "../images/paleo.png";

import { Send } from "lucide-react";

// –°—ä–∑–¥–∞–≤–∞–º–µ –æ—Ç–¥–µ–ª–Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∑–∞ HTML-–∞ –Ω–∞ –¥–∏–µ—Ç–∏—Ç–µ, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –¥—É–±–ª–∏—Ä–∞–Ω–µ
const DIET_INFO_HTML = `
    <h3 class='font-bold text-lg mb-4'>–û—Å–Ω–æ–≤–Ω–∏ –¥–∏–µ—Ç–∏—á–Ω–∏ –ø–æ–¥—Ö–æ–¥–∏</h3>
    <div class='grid gap-4'>
      <div class='flex items-center gap-4'>
        <img src="${balancedImg}" alt="–ë–∞–ª–∞–Ω—Å" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>üçè –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∞:</strong> –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞ —Ö—Ä–∞–Ω–∞ —Å —É–º–µ—Ä–µ–Ω–æ —Å—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∏.</div>
      </div>
      <div class='flex items-center gap-4'>
        <img src="${proteinImg}" alt="–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤–∞" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>ü•© –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤–∞:</strong> –í–∏—Å–æ–∫–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–µ–∏–Ω. –ó–∞ –º—É—Å–∫—É–ª–µ–Ω —Ä–∞—Å—Ç–µ–∂ –∏ —Å–∏—Ç–æ—Å—Ç.</div>
      </div>
      <div class='flex items-center gap-4'>
        <img src="${ketoImg}" alt="–ö–µ—Ç–æ" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>ü•ë –ö–µ—Ç–æ–≥–µ–Ω–Ω–∞:</strong> –ú–Ω–æ–≥–æ –Ω–∏—Å–∫–∏ –≤—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏, –≤–∏—Å–æ–∫–∏ –º–∞–∑–Ω–∏–Ω–∏ ‚Äì –∫–µ—Ç–æ–∑–∞.</div>
      </div>
      <div class='flex items-center gap-4'>
        <img src="${veganImg}" alt="–í–µ–≥–∞–Ω" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>üå± –í–µ–≥–∞–Ω:</strong> –ë–µ–∑ –∂–∏–≤–æ—Ç–∏–Ω—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏. –°–∞–º–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏.</div>
      </div>
      <div class='flex items-center gap-4'>
        <img src="${vegetarianImg}" alt="–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>üç≤ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞:</strong> –ü–æ–∑–≤–æ–ª—è–≤–∞ —è–π—Ü–∞ –∏ –º–ª–µ—á–Ω–∏, –Ω–æ –Ω–µ –º–µ—Å–æ.</div>
      </div>
      <div class='flex items-center gap-4'>
        <img src="${paleoImg}" alt="–ü–∞–ª–µ–æ" class='w-12 h-12 rounded-lg shadow' />
        <div><strong>üå∞ –ü–∞–ª–µ–æ:</strong> –ë–µ–∑ –∑—ä—Ä–Ω–∞, –º–ª–µ—á–Ω–∏ –∏ –ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–∏ —Ö—Ä–∞–Ω–∏.</div>
      </div>
    </div>
`;

export default function ChatbotPage() {
    /* --------------------------------------------------
    * 1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ / –∏–∑–≤–ª–∏—á–∞–º–µ sessionId, –∑–∞ –¥–∞ –¥—ä—Ä–∂–∏–º
    * —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–Ω –º–µ–∂–¥—É –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–∏—è—Ç–∞.
    * --------------------------------------------------*/
    const [sessionId] = useState(() => {
        const storedId = localStorage.getItem("chatbotSessionId");
        const newId = storedId || uuid();
        localStorage.setItem("chatbotSessionId", newId);
        return newId;
    });

    /* --------------------------------------------------
    * 2Ô∏è‚É£ –°—Ç–µ–π—Ç: —Å—ä–æ–±—â–µ–Ω–∏—è, input, typing, quick replies
    * --------------------------------------------------*/
    const [messages, setMessages] = useState([
        {
            id: 1,
            sender: "bot",
            timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
            text: `üëã –ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ê–∑ —Å—ä–º –≤–∞—à–∏—è—Ç –ª–∏—á–µ–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞ —Ñ–∏—Ç–Ω–µ—Å –∏ —Ö—Ä–∞–Ω–µ–Ω–µ. –ì–æ—Ç–æ–≤–∏ –ª–∏ —Å—Ç–µ –¥–∞ —Å—ä–∑–¥–∞–¥–µ–º –≤–∞—à–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω –ø–ª–∞–Ω? <br/><br/>
             ${DIET_INFO_HTML}
             <p class='mt-4'><strong>–ò—Å–∫–∞—à –ª–∏ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–∏–ø–∞ –¥–∏–µ—Ç–∏?</strong> <em>(–æ—Ç–≥–æ–≤–æ—Ä–∏ —Å "–¥–∞" / "–Ω–µ")</em></p>`
        }
    ]);

    const [inputMessage, setInputMessage] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const [quickReplies, setQuickReplies] = useState(["–¥–∞", "–Ω–µ"]);

    const chatRef = useRef(null);
    const navigate = useNavigate();
    const { user } = useAuth(); // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ useAuth –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è

    /* Helper –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ */
    const pushMessage = (msg) =>
        setMessages((prev) => [
            ...prev,
            {
                id: prev.length + 1,
                timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
                ...msg,
            },
        ]);

    /* Scroll –¥–æ –¥—ä–Ω–æ—Ç–æ –ø—Ä–∏ –Ω–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ */
    useEffect(() => {
        if (chatRef.current) {
            chatRef.current.scrollTo({ top: chatRef.current.scrollHeight, behavior: "smooth" });
        }
    }, [messages]);

    /* –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ (–∏–∑–ø–æ–ª–∑–≤–∞–º–µ useCallback –∑–∞ –º–µ–º–æ–∏–∑–∞—Ü–∏—è) */
    const processBotResponse = useCallback((data) => {
        setQuickReplies([]); // –í–∏–Ω–∞–≥–∏ –∏–∑—á–∏—Å—Ç–≤–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ –ø—Ä–µ–¥–∏ –Ω–æ–≤ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç –±–æ—Ç–∞

        switch (data?.type) {
            case "detailed_diet_info":
                // –ü–æ–∫–∞–∑–≤–∞ –ø—ä–ª–Ω–∏—è HTML –∑–∞ –¥–∏–µ—Ç–∏—Ç–µ –∏ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                const fullMessage = `${DIET_INFO_HTML} <p class='mt-4'>${data.message}</p>`;
                pushMessage({ text: fullMessage, sender: "bot" });
                // –ë—É—Ç–æ–Ω–∏—Ç–µ —Å–µ –∏–∑–≤–ª–∏—á–∞—Ç –æ—Ç data.buttons
                const detailedDietReplyOptions = data.buttons?.map((b) => b.value || b.text) || [];
                setQuickReplies(detailedDietReplyOptions);
                break;

            case "buttons":
                // –ü–æ–∫–∞–∑–≤–∞ —Å–∞–º–æ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –æ—Ç –±–æ—Ç–∞ –∏ –±—É—Ç–æ–Ω–∏—Ç–µ (–±–µ–∑ –ø–æ–≤—Ç–∞—Ä—è–Ω–µ –Ω–∞ –¥–∏–µ—Ç–∏—Ç–µ)
                pushMessage({ text: data.message, sender: "bot" });
                // –ë—É—Ç–æ–Ω–∏—Ç–µ —Å–µ –∏–∑–≤–ª–∏—á–∞—Ç –æ—Ç data.buttons
                const buttonReplyOptions = data.buttons?.map((b) => b.value || b.text) || [];
                setQuickReplies(buttonReplyOptions);
                break;

            case "text":
                // –û–±–∏–∫–Ω–æ–≤–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–≥–æ–≤–æ—Ä
                pushMessage({ text: data.message, sender: "bot" });
                setQuickReplies([]); // –ù—è–º–∞ –±—ä—Ä–∑–∏ –±—É—Ç–æ–Ω–∏ –∑–∞ plain text
                break;

            case "plan": // –¢–æ–∑–∏ —Ç–∏–ø —Å–µ–≥–∞ –æ–±—Ä–∞–±–æ—Ç–≤–∞ –∏ –≥–æ—Å—Ç–∏, –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ñ–ª–∞–≥–∞ isGuest, –∫–æ–π—Ç–æ –∏–¥–≤–∞ –æ—Ç –±–µ–∫–µ–Ω–¥–∞
                if (data.isGuest) {
                    // –ó–∞ –≥–æ—Å—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
                    sessionStorage.setItem("demoPlan", JSON.stringify(data.plan)); // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ü–µ–ª–∏—è FullPlanDTO
                    pushMessage({ text: "–ì–æ—Ç–æ–≤ —Å–∏! –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º –¥–µ–º–æ —Ä–µ–∂–∏–º‚Ä¶", sender: "bot" });
                    setQuickReplies([]);
                    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ sessionId –∑–∞ –≥–æ—Å—Ç–∏, –∑–∞ –¥–∞ –Ω–µ —Å–µ –≤—Ä—ä—â–∞—Ç –∫—ä–º —Å—Ç–∞—Ä–∞ —Å–µ—Å–∏—è
                    localStorage.removeItem("chatbotSessionId");
                    setTimeout(() => navigate("/guest-summary"), 1200);
                } else if (user?.id) { // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ user –µ –ª–æ–≥–Ω–∞—Ç —á—Ä–µ–∑ useAuth()
                    // –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
                    sessionStorage.setItem("fullPlan", JSON.stringify(data.plan)); // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ü–µ–ª–∏—è FullPlanDTO
                    pushMessage({ text: "‚úÖ –¢–≤–æ—è—Ç –ø—ä–ª–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω —Ä–µ–∂–∏–º –µ –≥–æ—Ç–æ–≤! –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ‚Ä¶", sender: "bot" });
                    setQuickReplies([]);
                    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ sessionId, —Ç—ä–π –∫–∞—Ç–æ –ø–ª–∞–Ω—ä—Ç –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω –∏ –∑–∞–ø–∞–∑–µ–Ω
                    localStorage.removeItem("chatbotSessionId");
                    setTimeout(() => navigate("/plan"), 1200);
                } else {
                    // –ê–∫–æ –ø–æ –Ω—è–∫–∞–∫–≤–∞ –ø—Ä–∏—á–∏–Ω–∞ –±–æ—Ç–∞ –µ –≤—ä—Ä–Ω–∞–ª "plan" –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –∫–æ–π—Ç–æ –Ω–µ –µ –≥–æ—Å—Ç, –Ω–æ –Ω–µ –µ –∏ –ª–æ–≥–Ω–∞—Ç
                    pushMessage({ text: "üîí –ó–∞ –¥–∞ –≤–∏–¥–∏—à –ø—ä–ª–Ω–∏—è –ø–ª–∞–Ω, –º–æ–ª—è, –≤–ª–µ–∑ –≤ –∞–∫–∞—É–Ω—Ç–∞ —Å–∏.", sender: "bot" });
                    setQuickReplies([]);
                    setTimeout(() => navigate("/login"), 1500);
                }
                break;

            case "error":
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏ –æ—Ç –±–µ–∫–µ–Ω–¥–∞
                pushMessage({ text: `‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: ${data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞."}`, sender: "bot" });
                setQuickReplies([]);
                break;

            default:
                // –ê–∫–æ —Ñ–æ—Ä–º–∞—Ç—ä—Ç –µ –Ω–µ–æ—á–∞–∫–≤–∞–Ω –∏–ª–∏ –µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∏–Ω–≥
                if (typeof data === "string") {
                    pushMessage({ text: data, sender: "bot" });
                } else {
                    pushMessage({ text: "‚ö†Ô∏è –ù–µ–æ—á–∞–∫–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞.", sender: "bot" });
                }
                setQuickReplies([]);
                break;
        }
    }, [navigate, user]); // –î–æ–±–∞–≤—è–º–µ user –∫–∞—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –∑–∞ useCallback

    /* –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ */
    const handleSendMessage = async (e, quick = null) => {
        e?.preventDefault();
        const messageToSend = quick || inputMessage.trim();
        if (!messageToSend) return;

        pushMessage({ text: messageToSend, sender: "user" });
        setInputMessage("");
        setQuickReplies([]); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –±—ä—Ä–∑–∏—Ç–µ –±—É—Ç–æ–Ω–∏ –≤–µ–¥–Ω–∞–≥–∞ —Å–ª–µ–¥ –∫–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–∑–ø—Ä–∞—Ç–∏ —Å—ä–æ–±—â–µ–Ω–∏–µ
        setIsTyping(true);

        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–º–µ userRole –∏ userId –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –∫—ä–º –±–µ–∫–µ–Ω–¥–∞
            // user.id –æ—Ç useAuth() –µ –Ω–∞–π-–Ω–∞–¥–µ–∂–¥–µ–Ω –∑–∞ –ª–æ–≥–Ω–∞—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
            // –ê–∫–æ user.id —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –∑–Ω–∞—á–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç –∏ –Ω–µ –µ –≥–æ—Å—Ç.
            // –ê–∫–æ user.id –µ null/undefined, —Ç–æ–≥–∞–≤–∞ –µ –≥–æ—Å—Ç.
            const userRole = user?.id ? "USER" : "GUEST";
            const currentUserId = user?.id || null; // –ò–∑–ø—Ä–∞—â–∞–º–µ ID, –∞–∫–æ –∏–º–∞ —Ç–∞–∫–æ–≤–∞

            const { data } = await sendMessage(sessionId, messageToSend, userRole, currentUserId);
            processBotResponse(data);
        } catch (err) {
            console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ:", err);
            pushMessage({ text: "‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å —á–∞—Ç–±–æ—Ç–∞.", sender: "bot" });
        } finally {
            setIsTyping(false);
        }
    };

    /* JSX */
    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-slate-100 flex items-center justify-center p-4">
            <div className="w-full max-w-3xl h-[85vh] flex flex-col rounded-3xl shadow-2xl border-[3px] border-gray-300 bg-white overflow-hidden">
                {/* Header */}
                <div className="flex items-center gap-3 p-4 border-b bg-slate-50">
                    <img src={chatbotIcon} alt="bot" className="h-8 w-8" />
                    <h2 className="text-xl font-bold text-gray-800">–§–∏—Ç–Ω–µ—Å –ß–∞—Ç–±–æ—Ç</h2>
                </div>

                {/* Messages */}
                <div ref={chatRef} className="flex-1 overflow-y-auto px-6 py-4 space-y-6 bg-gradient-to-b from-white via-gray-50 to-gray-100 scrollbar-thin scrollbar-thumb-gray-300">
                    {messages.map(({ id, text, sender, timestamp }) => (
                        <div key={id} className={`flex ${sender === "user" ? "justify-end" : "justify-start"}`}>
                            <div className="flex items-end gap-3 max-w-[80%]">
                                {sender === "bot" && <img src={chatbotIcon} alt="bot" className="h-8 w-8 rounded-full shadow-sm" />}
                                <div>
                                    <div
                                        className={`prose prose-sm sm:prose-base px-5 py-3 shadow-lg border whitespace-pre-wrap rounded-2xl font-medium text-sm leading-relaxed tracking-wide ${
                                            sender === "user"
                                                ? "ml-auto bg-gradient-to-br from-blue-500 to-blue-600 text-white border-blue-700 rounded-br-none"
                                                : "bg-white text-gray-900 border-gray-200 rounded-bl-none"
                                        }`}
                                        dangerouslySetInnerHTML={{ __html: text }}
                                    />
                                    <div className="text-xs text-gray-400 mt-1 pl-2">{timestamp}</div>
                                </div>
                                {sender === "user" && <img src={userIcon} alt="user" className="h-8 w-8 rounded-full shadow-sm" />}
                            </div>
                        </div>
                    ))}

                    {/* Typing indicator */}
                    {isTyping && (
                        <div className="flex justify-start">
                            <div className="flex items-end gap-3 max-w-[80%]">
                                <img src={chatbotIcon} alt="bot" className="h-8 w-8 rounded-full shadow-sm" />
                                <div className="px-4 py-2 bg-gray-200 text-sm text-gray-700 rounded-2xl border border-gray-300">
                                    <span className="inline-flex gap-1 items-center">
                                        –ë–æ—Ç—ä—Ç –ø–∏—à–µ
                                        <span className="animate-bounce">.</span>
                                        <span className="animate-bounce delay-100">.</span>
                                        <span className="animate-bounce delay-200">.</span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* Quick Replies */}
                {quickReplies.length > 0 && (
                    <div className="p-4 bg-white border-t border-gray-200 flex flex-wrap gap-2 justify-center">
                        {quickReplies.map((reply, i) => (
                            <button
                                key={i}
                                onClick={() => handleSendMessage(null, reply)}
                                className="px-4 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors duration-200 text-sm shadow-md"
                                disabled={isTyping}
                            >
                                {reply}
                            </button>
                        ))}
                    </div>
                )}

                {/* Input */}
                <form onSubmit={handleSendMessage} className="p-4 border-t bg-slate-50">
                    <div className="flex items-center gap-3">
                        <input
                            value={inputMessage}
                            onChange={(e) => setInputMessage(e.target.value)}
                            placeholder="–ù–∞–ø–∏—à–∏ —Å—ä–æ–±—â–µ–Ω–∏–µ‚Ä¶"
                            className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                            disabled={isTyping}
                        />
                        <button type="submit" disabled={!inputMessage.trim() || isTyping} className="bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 disabled:opacity-50">
                            <Send className="h-5 w-5" />
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}