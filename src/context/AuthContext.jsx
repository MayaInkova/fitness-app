import { createContext, useContext, useState, useEffect } from 'react';
import api from '../services/api'; // axios –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è —Å baseURL = http://localhost:8080/api
import { saveToken, clearToken, getToken } from '../utils/token';

const AuthContext = createContext(null);
export const useAuth = () => useContext(AuthContext);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞—Ä–µ–∂–¥–∞–º–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏ –ø—Ä–∏ refresh ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    const token = getToken(); // getToken() —á–µ—Ç–µ –æ—Ç localStorage
    const storedUserId = localStorage.getItem('userId');
    const storedUserEmail = localStorage.getItem('userEmail');
    const storedUserRoles = localStorage.getItem('userRoles');

    if (token) {
      setUser({
        accessToken: token,
        id: storedUserId ? Number(storedUserId) : null,
        email: storedUserEmail,
        roles: storedUserRoles ? JSON.parse(storedUserRoles) : [],
      });
    }
  }, []); // –ü—É—Å—Ç –º–∞—Å–∏–≤ –∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∑–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ —Å–∞–º–æ –≤–µ–¥–Ω—ä–∂ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  const login = async (email, password) => {
    const { data } = await api.post('/auth/login', { email, password });

    saveToken(data.accessToken); // –ó–∞–ø–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage (utils/token.js)

    // –ó–∞–ø–∞–∑–≤–∞–º–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–∞–Ω–Ω–∏ –≤ localStorage
    localStorage.setItem('userId', data.id);
    localStorage.setItem('userEmail', data.email);
    localStorage.setItem('userRoles', JSON.stringify(data.roles)); // –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ data.roles –µ –Ω–∞–ª–∏—á–µ–Ω —Ç—É–∫!

    setUser(data); // –û–±–Ω–æ–≤—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  };

  const register = async (fullName, email, password) => {
    await api.post('/auth/register', { fullName, email, password });
  };

  const logout = () => {
    clearToken(); // –ò–∑—á–∏—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç localStorage (utils/token.js)

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –∏ –¥—Ä—É–≥–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–∞–Ω–Ω–∏ –æ—Ç localStorage
    localStorage.removeItem('userId');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('userRoles');

    setUser(null); // –ò–∑—á–∏—Å—Ç–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  };

  // üö® –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –ó–ê–ë–†–ê–í–ï–ù–ê –ü–ê–†–û–õ–ê
  const forgotPassword = async (email) => {
    // –ò–∑–ø—Ä–∞—â–∞–º–µ POST –∑–∞—è–≤–∫–∞ –∫—ä–º –±–µ–∫–µ–Ω–¥–∞ —Å –∏–º–µ–π–ª–∞
    // –û—á–∞–∫–≤–∞–º–µ –±–µ–∫–µ–Ω–¥ –µ–Ω–¥–ø–æ–π–Ω—Ç –æ—Ç —Ç–∏–ø–∞ /api/auth/forgot-password
    const response = await api.post('/auth/forgot-password', { email });
    return response.data; // –í—Ä—ä—â–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç –±–µ–∫–µ–Ω–¥–∞
  };

  // üåü –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –ü–†–û–í–ï–†–ö–ê –ù–ê –†–û–õ–Ø - –î–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∞ –µ –ø—Ä–∞–≤–∏–ª–Ω–æ!
  const hasRole = (roleName) => {
    return user && user.roles && user.roles.includes(roleName);
  };

  return (
    // üí• –ö–û–†–ï–ö–¶–ò–Ø: –î–æ–±–∞–≤—è–º–µ hasRole –∫—ä–º value –æ–±–µ–∫—Ç–∞, –∑–∞ –¥–∞ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–Ω–∞ –ø—Ä–µ–∑ useAuth()
    <AuthContext.Provider value={{ user, login, register, logout, forgotPassword, hasRole }}>
      {children}
    </AuthContext.Provider>
  );
}